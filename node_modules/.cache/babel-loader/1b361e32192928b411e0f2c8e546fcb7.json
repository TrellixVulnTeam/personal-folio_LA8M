{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EmitterInstance = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nconst EmitterSize_1 = require(\"./Options/Classes/EmitterSize\");\n\nfunction randomCoordinate(position, offset) {\n  return position + offset * (Math.random() - 0.5);\n}\n\nfunction randomPosition(position, offset) {\n  return {\n    x: randomCoordinate(position.x, offset.x),\n    y: randomCoordinate(position.y, offset.y)\n  };\n}\n\nclass EmitterInstance {\n  constructor(emitters, container, emitterOptions, position) {\n    var _a, _b, _c, _d, _e, _f;\n\n    var _g;\n\n    this.emitters = emitters;\n    this.container = container;\n    this.firstSpawn = true;\n    this.currentDuration = 0;\n    this.currentEmitDelay = 0;\n    this.currentSpawnDelay = 0;\n    this.initialPosition = position;\n    this.emitterOptions = Utils_1.deepExtend({}, emitterOptions);\n    this.spawnDelay = ((_a = this.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000 / this.container.retina.reduceFactor;\n    this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\n    this.name = emitterOptions.name;\n    let particlesOptions = Utils_1.deepExtend({}, this.emitterOptions.particles);\n    particlesOptions !== null && particlesOptions !== void 0 ? particlesOptions : particlesOptions = {};\n    (_c = particlesOptions.move) !== null && _c !== void 0 ? _c : particlesOptions.move = {};\n    (_d = (_g = particlesOptions.move).direction) !== null && _d !== void 0 ? _d : _g.direction = this.emitterOptions.direction;\n\n    if (this.emitterOptions.spawnColor !== undefined) {\n      this.spawnColor = Utils_1.colorToHsl(this.emitterOptions.spawnColor);\n    }\n\n    this.paused = !this.emitterOptions.autoPlay;\n    this.particlesOptions = particlesOptions;\n    this.size = (_e = this.emitterOptions.size) !== null && _e !== void 0 ? _e : (() => {\n      const size = new EmitterSize_1.EmitterSize();\n      size.load({\n        height: 0,\n        mode: Enums_1.SizeMode.percent,\n        width: 0\n      });\n      return size;\n    })();\n    this.lifeCount = (_f = this.emitterOptions.life.count) !== null && _f !== void 0 ? _f : -1;\n    this.immortal = this.lifeCount <= 0;\n    this.play();\n  }\n\n  externalPlay() {\n    this.paused = false;\n    this.play();\n  }\n\n  externalPause() {\n    this.paused = true;\n    this.pause();\n  }\n\n  play() {\n    if (this.paused) {\n      return;\n    }\n\n    if (this.container.retina.reduceFactor && (this.lifeCount > 0 || this.immortal || !this.emitterOptions.life.count)) {\n      if (this.emitDelay === undefined) {\n        const delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\n        this.emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n      }\n\n      if (this.lifeCount > 0 || this.immortal) {\n        this.prepareToDie();\n      }\n    }\n  }\n\n  pause() {\n    if (this.paused) {\n      return;\n    }\n\n    delete this.emitDelay;\n  }\n\n  resize() {\n    const initialPosition = this.initialPosition;\n    this.position = initialPosition && Utils_1.isPointInside(initialPosition, this.container.canvas.size) ? initialPosition : this.calcPosition();\n  }\n\n  update(delta) {\n    var _a, _b, _c;\n\n    if (this.paused) {\n      return;\n    }\n\n    if (this.firstSpawn) {\n      this.firstSpawn = false;\n      this.currentSpawnDelay = (_a = this.spawnDelay) !== null && _a !== void 0 ? _a : 0;\n      this.currentEmitDelay = (_b = this.emitDelay) !== null && _b !== void 0 ? _b : 0;\n      delta.value = 0;\n    }\n\n    if (this.duration !== undefined) {\n      this.currentDuration += delta.value;\n\n      if (this.currentDuration >= this.duration) {\n        this.pause();\n\n        if (this.spawnDelay !== undefined) {\n          delete this.spawnDelay;\n        }\n\n        if (!this.immortal) {\n          this.lifeCount--;\n        }\n\n        if (this.lifeCount > 0 || this.immortal) {\n          this.position = this.calcPosition();\n          this.spawnDelay = ((_c = this.emitterOptions.life.delay) !== null && _c !== void 0 ? _c : 0) * 1000 / this.container.retina.reduceFactor;\n        } else {\n          this.destroy();\n        }\n\n        this.currentDuration -= this.duration;\n        delete this.duration;\n      }\n    }\n\n    if (this.spawnDelay !== undefined) {\n      this.currentSpawnDelay += delta.value;\n\n      if (this.currentSpawnDelay >= this.spawnDelay) {\n        this.play();\n        this.currentSpawnDelay -= this.currentSpawnDelay;\n        delete this.spawnDelay;\n      }\n    }\n\n    if (this.emitDelay !== undefined) {\n      this.currentEmitDelay += delta.value;\n\n      if (this.currentEmitDelay >= this.emitDelay) {\n        this.emit();\n        this.currentEmitDelay -= this.emitDelay;\n      }\n    }\n  }\n\n  prepareToDie() {\n    var _a;\n\n    if (this.paused) {\n      return;\n    }\n\n    const duration = (_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration;\n\n    if (this.container.retina.reduceFactor && (this.lifeCount > 0 || this.immortal) && duration !== undefined && duration > 0) {\n      this.duration = duration * 1000;\n    }\n  }\n\n  destroy() {\n    this.emitters.removeEmitter(this);\n  }\n\n  calcPosition() {\n    var _a, _b;\n\n    const container = this.container;\n    const percentPosition = this.emitterOptions.position;\n    return {\n      x: ((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100 * container.canvas.size.width,\n      y: ((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100 * container.canvas.size.height\n    };\n  }\n\n  emit() {\n    var _a;\n\n    if (this.paused) {\n      return;\n    }\n\n    const container = this.container;\n    const position = this.position;\n    const offset = {\n      x: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.width * this.size.width / 100 : this.size.width,\n      y: this.size.mode === Enums_1.SizeMode.percent ? container.canvas.size.height * this.size.height / 100 : this.size.height\n    };\n    const quantity = Utils_1.getRangeValue(this.emitterOptions.rate.quantity);\n\n    for (let i = 0; i < quantity; i++) {\n      const particlesOptions = Utils_1.deepExtend({}, this.particlesOptions);\n\n      if (this.spawnColor !== undefined) {\n        const colorAnimation = (_a = this.emitterOptions.spawnColor) === null || _a === void 0 ? void 0 : _a.animation;\n\n        if (colorAnimation) {\n          const hueAnimation = colorAnimation;\n\n          if (hueAnimation.enable) {\n            this.spawnColor.h = this.setColorAnimation(hueAnimation, this.spawnColor.h, 360);\n          } else {\n            const hslAnimation = colorAnimation;\n            this.spawnColor.h = this.setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n            this.spawnColor.s = this.setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n            this.spawnColor.l = this.setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n          }\n        }\n\n        if (!particlesOptions.color) {\n          particlesOptions.color = {\n            value: this.spawnColor\n          };\n        } else {\n          particlesOptions.color.value = this.spawnColor;\n        }\n      }\n\n      container.particles.addParticle(randomPosition(position, offset), particlesOptions);\n    }\n  }\n\n  setColorAnimation(animation, initValue, maxValue) {\n    var _a;\n\n    const container = this.container;\n\n    if (!animation.enable) {\n      return initValue;\n    }\n\n    const colorOffset = Utils_1.randomInRange(animation.offset);\n    const delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\n    const emitFactor = 1000 * delay / container.retina.reduceFactor;\n    const colorSpeed = (_a = animation.speed) !== null && _a !== void 0 ? _a : 0;\n    return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n  }\n\n}\n\nexports.EmitterInstance = EmitterInstance;","map":{"version":3,"sources":["C:/Users/Tiago/personal-folio/node_modules/tsparticles/Plugins/Emitters/EmitterInstance.js"],"names":["Object","defineProperty","exports","value","EmitterInstance","Utils_1","require","Enums_1","EmitterSize_1","randomCoordinate","position","offset","Math","random","randomPosition","x","y","constructor","emitters","container","emitterOptions","_a","_b","_c","_d","_e","_f","_g","firstSpawn","currentDuration","currentEmitDelay","currentSpawnDelay","initialPosition","deepExtend","spawnDelay","life","delay","retina","reduceFactor","calcPosition","name","particlesOptions","particles","move","direction","spawnColor","undefined","colorToHsl","paused","autoPlay","size","EmitterSize","load","height","mode","SizeMode","percent","width","lifeCount","count","immortal","play","externalPlay","externalPause","pause","emitDelay","getRangeValue","rate","prepareToDie","resize","isPointInside","canvas","update","delta","duration","destroy","emit","removeEmitter","percentPosition","quantity","i","colorAnimation","animation","hueAnimation","enable","h","setColorAnimation","hslAnimation","s","l","color","addParticle","initValue","maxValue","colorOffset","randomInRange","emitFactor","colorSpeed","speed","fpsLimit"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EmitterInstance = void 0;\r\nconst Utils_1 = require(\"../../Utils\");\r\nconst Enums_1 = require(\"../../Enums\");\r\nconst EmitterSize_1 = require(\"./Options/Classes/EmitterSize\");\r\nfunction randomCoordinate(position, offset) {\r\n    return position + offset * (Math.random() - 0.5);\r\n}\r\nfunction randomPosition(position, offset) {\r\n    return {\r\n        x: randomCoordinate(position.x, offset.x),\r\n        y: randomCoordinate(position.y, offset.y),\r\n    };\r\n}\r\nclass EmitterInstance {\r\n    constructor(emitters, container, emitterOptions, position) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        var _g;\r\n        this.emitters = emitters;\r\n        this.container = container;\r\n        this.firstSpawn = true;\r\n        this.currentDuration = 0;\r\n        this.currentEmitDelay = 0;\r\n        this.currentSpawnDelay = 0;\r\n        this.initialPosition = position;\r\n        this.emitterOptions = Utils_1.deepExtend({}, emitterOptions);\r\n        this.spawnDelay = (((_a = this.emitterOptions.life.delay) !== null && _a !== void 0 ? _a : 0) * 1000) / this.container.retina.reduceFactor;\r\n        this.position = (_b = this.initialPosition) !== null && _b !== void 0 ? _b : this.calcPosition();\r\n        this.name = emitterOptions.name;\r\n        let particlesOptions = Utils_1.deepExtend({}, this.emitterOptions.particles);\r\n        particlesOptions !== null && particlesOptions !== void 0 ? particlesOptions : (particlesOptions = {});\r\n        (_c = particlesOptions.move) !== null && _c !== void 0 ? _c : (particlesOptions.move = {});\r\n        (_d = (_g = particlesOptions.move).direction) !== null && _d !== void 0 ? _d : (_g.direction = this.emitterOptions.direction);\r\n        if (this.emitterOptions.spawnColor !== undefined) {\r\n            this.spawnColor = Utils_1.colorToHsl(this.emitterOptions.spawnColor);\r\n        }\r\n        this.paused = !this.emitterOptions.autoPlay;\r\n        this.particlesOptions = particlesOptions;\r\n        this.size =\r\n            (_e = this.emitterOptions.size) !== null && _e !== void 0 ? _e : (() => {\r\n                const size = new EmitterSize_1.EmitterSize();\r\n                size.load({\r\n                    height: 0,\r\n                    mode: Enums_1.SizeMode.percent,\r\n                    width: 0,\r\n                });\r\n                return size;\r\n            })();\r\n        this.lifeCount = (_f = this.emitterOptions.life.count) !== null && _f !== void 0 ? _f : -1;\r\n        this.immortal = this.lifeCount <= 0;\r\n        this.play();\r\n    }\r\n    externalPlay() {\r\n        this.paused = false;\r\n        this.play();\r\n    }\r\n    externalPause() {\r\n        this.paused = true;\r\n        this.pause();\r\n    }\r\n    play() {\r\n        if (this.paused) {\r\n            return;\r\n        }\r\n        if (this.container.retina.reduceFactor &&\r\n            (this.lifeCount > 0 || this.immortal || !this.emitterOptions.life.count)) {\r\n            if (this.emitDelay === undefined) {\r\n                const delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\r\n                this.emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\r\n            }\r\n            if (this.lifeCount > 0 || this.immortal) {\r\n                this.prepareToDie();\r\n            }\r\n        }\r\n    }\r\n    pause() {\r\n        if (this.paused) {\r\n            return;\r\n        }\r\n        delete this.emitDelay;\r\n    }\r\n    resize() {\r\n        const initialPosition = this.initialPosition;\r\n        this.position =\r\n            initialPosition && Utils_1.isPointInside(initialPosition, this.container.canvas.size)\r\n                ? initialPosition\r\n                : this.calcPosition();\r\n    }\r\n    update(delta) {\r\n        var _a, _b, _c;\r\n        if (this.paused) {\r\n            return;\r\n        }\r\n        if (this.firstSpawn) {\r\n            this.firstSpawn = false;\r\n            this.currentSpawnDelay = (_a = this.spawnDelay) !== null && _a !== void 0 ? _a : 0;\r\n            this.currentEmitDelay = (_b = this.emitDelay) !== null && _b !== void 0 ? _b : 0;\r\n            delta.value = 0;\r\n        }\r\n        if (this.duration !== undefined) {\r\n            this.currentDuration += delta.value;\r\n            if (this.currentDuration >= this.duration) {\r\n                this.pause();\r\n                if (this.spawnDelay !== undefined) {\r\n                    delete this.spawnDelay;\r\n                }\r\n                if (!this.immortal) {\r\n                    this.lifeCount--;\r\n                }\r\n                if (this.lifeCount > 0 || this.immortal) {\r\n                    this.position = this.calcPosition();\r\n                    this.spawnDelay =\r\n                        (((_c = this.emitterOptions.life.delay) !== null && _c !== void 0 ? _c : 0) * 1000) / this.container.retina.reduceFactor;\r\n                }\r\n                else {\r\n                    this.destroy();\r\n                }\r\n                this.currentDuration -= this.duration;\r\n                delete this.duration;\r\n            }\r\n        }\r\n        if (this.spawnDelay !== undefined) {\r\n            this.currentSpawnDelay += delta.value;\r\n            if (this.currentSpawnDelay >= this.spawnDelay) {\r\n                this.play();\r\n                this.currentSpawnDelay -= this.currentSpawnDelay;\r\n                delete this.spawnDelay;\r\n            }\r\n        }\r\n        if (this.emitDelay !== undefined) {\r\n            this.currentEmitDelay += delta.value;\r\n            if (this.currentEmitDelay >= this.emitDelay) {\r\n                this.emit();\r\n                this.currentEmitDelay -= this.emitDelay;\r\n            }\r\n        }\r\n    }\r\n    prepareToDie() {\r\n        var _a;\r\n        if (this.paused) {\r\n            return;\r\n        }\r\n        const duration = (_a = this.emitterOptions.life) === null || _a === void 0 ? void 0 : _a.duration;\r\n        if (this.container.retina.reduceFactor &&\r\n            (this.lifeCount > 0 || this.immortal) &&\r\n            duration !== undefined &&\r\n            duration > 0) {\r\n            this.duration = duration * 1000;\r\n        }\r\n    }\r\n    destroy() {\r\n        this.emitters.removeEmitter(this);\r\n    }\r\n    calcPosition() {\r\n        var _a, _b;\r\n        const container = this.container;\r\n        const percentPosition = this.emitterOptions.position;\r\n        return {\r\n            x: (((_a = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.x) !== null && _a !== void 0 ? _a : Math.random() * 100) / 100) * container.canvas.size.width,\r\n            y: (((_b = percentPosition === null || percentPosition === void 0 ? void 0 : percentPosition.y) !== null && _b !== void 0 ? _b : Math.random() * 100) / 100) * container.canvas.size.height,\r\n        };\r\n    }\r\n    emit() {\r\n        var _a;\r\n        if (this.paused) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        const position = this.position;\r\n        const offset = {\r\n            x: this.size.mode === Enums_1.SizeMode.percent\r\n                ? (container.canvas.size.width * this.size.width) / 100\r\n                : this.size.width,\r\n            y: this.size.mode === Enums_1.SizeMode.percent\r\n                ? (container.canvas.size.height * this.size.height) / 100\r\n                : this.size.height,\r\n        };\r\n        const quantity = Utils_1.getRangeValue(this.emitterOptions.rate.quantity);\r\n        for (let i = 0; i < quantity; i++) {\r\n            const particlesOptions = Utils_1.deepExtend({}, this.particlesOptions);\r\n            if (this.spawnColor !== undefined) {\r\n                const colorAnimation = (_a = this.emitterOptions.spawnColor) === null || _a === void 0 ? void 0 : _a.animation;\r\n                if (colorAnimation) {\r\n                    const hueAnimation = colorAnimation;\r\n                    if (hueAnimation.enable) {\r\n                        this.spawnColor.h = this.setColorAnimation(hueAnimation, this.spawnColor.h, 360);\r\n                    }\r\n                    else {\r\n                        const hslAnimation = colorAnimation;\r\n                        this.spawnColor.h = this.setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\r\n                        this.spawnColor.s = this.setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\r\n                        this.spawnColor.l = this.setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\r\n                    }\r\n                }\r\n                if (!particlesOptions.color) {\r\n                    particlesOptions.color = {\r\n                        value: this.spawnColor,\r\n                    };\r\n                }\r\n                else {\r\n                    particlesOptions.color.value = this.spawnColor;\r\n                }\r\n            }\r\n            container.particles.addParticle(randomPosition(position, offset), particlesOptions);\r\n        }\r\n    }\r\n    setColorAnimation(animation, initValue, maxValue) {\r\n        var _a;\r\n        const container = this.container;\r\n        if (!animation.enable) {\r\n            return initValue;\r\n        }\r\n        const colorOffset = Utils_1.randomInRange(animation.offset);\r\n        const delay = Utils_1.getRangeValue(this.emitterOptions.rate.delay);\r\n        const emitFactor = (1000 * delay) / container.retina.reduceFactor;\r\n        const colorSpeed = (_a = animation.speed) !== null && _a !== void 0 ? _a : 0;\r\n        return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\r\n    }\r\n}\r\nexports.EmitterInstance = EmitterInstance;\r\n"]},"metadata":{},"sourceType":"script"}