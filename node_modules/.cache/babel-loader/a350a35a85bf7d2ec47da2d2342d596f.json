{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Particles = void 0;\n\nconst Particle_1 = require(\"./Particle\");\n\nconst Utils_1 = require(\"../Utils\");\n\nconst InteractionManager_1 = require(\"./InteractionManager\");\n\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\n\nconst Mover_1 = require(\"./Particle/Mover\");\n\nclass Particles {\n  constructor(container) {\n    this.container = container;\n    this.nextId = 0;\n    this.array = [];\n    this.zArray = [];\n    this.mover = new Mover_1.Mover(container);\n    this.limit = 0;\n    this.needsSort = false;\n    this.lastZIndex = 0;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    this.interactionManager = new InteractionManager_1.InteractionManager(container);\n    const canvasSize = this.container.canvas.size;\n    this.linksColors = new Map();\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.updaters = Utils_1.Plugins.getUpdaters(container);\n  }\n\n  get count() {\n    return this.array.length;\n  }\n\n  init() {\n    var _a;\n\n    const container = this.container;\n    const options = container.actualOptions;\n    this.lastZIndex = 0;\n    this.needsSort = false;\n    this.linksFreq = new Map();\n    this.trianglesFreq = new Map();\n    let handled = false;\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.particlesInitialization !== undefined) {\n        handled = plugin.particlesInitialization();\n      }\n\n      if (handled) {\n        break;\n      }\n    }\n\n    this.addManualParticles();\n\n    if (!handled) {\n      for (const group in options.particles.groups) {\n        const groupOptions = options.particles.groups[group];\n\n        for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\n          this.addParticle(undefined, groupOptions, group);\n        }\n      }\n\n      for (let i = this.count; i < options.particles.number.value; i++) {\n        this.addParticle();\n      }\n    }\n\n    container.pathGenerator.init();\n  }\n\n  redraw() {\n    this.clear();\n    this.init();\n    this.draw({\n      value: 0,\n      factor: 0\n    });\n  }\n\n  removeAt(index, quantity = 1, group, override) {\n    if (!(index >= 0 && index <= this.count)) {\n      return;\n    }\n\n    let deleted = 0;\n\n    for (let i = index; deleted < quantity && i < this.count; i++) {\n      const particle = this.array[i];\n\n      if (!particle || particle.group !== group) {\n        continue;\n      }\n\n      particle.destroy(override);\n      this.array.splice(i--, 1);\n      const zIdx = this.zArray.indexOf(particle);\n      this.zArray.splice(zIdx, 1);\n      deleted++;\n    }\n  }\n\n  remove(particle, group, override) {\n    this.removeAt(this.array.indexOf(particle), undefined, group, override);\n  }\n\n  update(delta) {\n    const container = this.container;\n    const particlesToDelete = [];\n    container.pathGenerator.update();\n\n    for (const [, plugin] of container.plugins) {\n      if (plugin.update !== undefined) {\n        plugin.update(delta);\n      }\n    }\n\n    for (const particle of this.array) {\n      const resizeFactor = this.container.canvas.resizeFactor;\n\n      if (resizeFactor) {\n        particle.position.x *= resizeFactor.width;\n        particle.position.y *= resizeFactor.height;\n      }\n\n      for (const [, plugin] of this.container.plugins) {\n        if (particle.destroyed) {\n          break;\n        }\n\n        if (plugin.particleUpdate) {\n          plugin.particleUpdate(particle, delta);\n        }\n      }\n\n      this.mover.move(particle, delta);\n\n      if (particle.destroyed) {\n        particlesToDelete.push(particle);\n        continue;\n      }\n\n      this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\n    }\n\n    for (const particle of particlesToDelete) {\n      this.remove(particle);\n    }\n\n    this.interactionManager.externalInteract(delta);\n\n    for (const particle of this.container.particles.array) {\n      for (const updater of this.updaters) {\n        updater.update(particle, delta);\n      }\n\n      if (!particle.destroyed && !particle.spawning) {\n        this.interactionManager.particlesInteract(particle, delta);\n      }\n    }\n\n    delete container.canvas.resizeFactor;\n  }\n\n  draw(delta) {\n    const container = this.container;\n    container.canvas.clear();\n    const canvasSize = this.container.canvas.size;\n    this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, canvasSize.width * 3 / 2, canvasSize.height * 3 / 2), 4);\n    this.update(delta);\n\n    if (this.needsSort) {\n      this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\n      this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\n      this.needsSort = false;\n    }\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawPlugin(plugin, delta);\n    }\n\n    for (const p of this.zArray) {\n      p.draw(delta);\n    }\n  }\n\n  clear() {\n    this.array = [];\n    this.zArray = [];\n  }\n\n  push(nb, mouse, overrideOptions, group) {\n    this.pushing = true;\n\n    for (let i = 0; i < nb; i++) {\n      this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\n    }\n\n    this.pushing = false;\n  }\n\n  addParticle(position, overrideOptions, group) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const limit = options.particles.number.limit * container.density;\n\n    if (limit > 0) {\n      const countToRemove = this.count + 1 - limit;\n\n      if (countToRemove > 0) {\n        this.removeQuantity(countToRemove);\n      }\n    }\n\n    return this.pushParticle(position, overrideOptions, group);\n  }\n\n  addSplitParticle(parent) {\n    const splitOptions = parent.options.destroy.split;\n    const options = new ParticlesOptions_1.ParticlesOptions();\n    options.load(parent.options);\n    const factor = Utils_1.getRangeValue(splitOptions.factor.value);\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n\n    if (typeof options.size.value === \"number\") {\n      options.size.value /= factor;\n    } else {\n      options.size.value.min /= factor;\n      options.size.value.max /= factor;\n    }\n\n    options.load(splitOptions.particles);\n    const offset = splitOptions.sizeOffset ? Utils_1.setRangeValue(-parent.size.value, parent.size.value) : 0;\n    const position = {\n      x: parent.position.x + Utils_1.randomInRange(offset),\n      y: parent.position.y + Utils_1.randomInRange(offset)\n    };\n    return this.pushParticle(position, options, parent.group, particle => {\n      if (particle.size.value < 0.5) {\n        return false;\n      }\n\n      particle.velocity.length = Utils_1.randomInRange(Utils_1.setRangeValue(parent.velocity.length, particle.velocity.length));\n      particle.splitCount = parent.splitCount + 1;\n      particle.unbreakable = true;\n      setTimeout(() => {\n        particle.unbreakable = false;\n      }, 500);\n      return true;\n    });\n  }\n\n  removeQuantity(quantity, group) {\n    this.removeAt(0, quantity, group);\n  }\n\n  getLinkFrequency(p1, p2) {\n    const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\n    let res = this.linksFreq.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.linksFreq.set(key, res);\n    }\n\n    return res;\n  }\n\n  getTriangleFrequency(p1, p2, p3) {\n    let [id1, id2, id3] = [p1.id, p2.id, p3.id];\n\n    if (id1 > id2) {\n      [id2, id1] = [id1, id2];\n    }\n\n    if (id2 > id3) {\n      [id3, id2] = [id2, id3];\n    }\n\n    if (id1 > id3) {\n      [id3, id1] = [id1, id3];\n    }\n\n    const key = `${id1}_${id2}_${id3}`;\n    let res = this.trianglesFreq.get(key);\n\n    if (res === undefined) {\n      res = Math.random();\n      this.trianglesFreq.set(key, res);\n    }\n\n    return res;\n  }\n\n  addManualParticles() {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    for (const particle of options.manualParticles) {\n      const pos = particle.position ? {\n        x: particle.position.x * container.canvas.size.width / 100,\n        y: particle.position.y * container.canvas.size.height / 100\n      } : undefined;\n      this.addParticle(pos, particle.options);\n    }\n  }\n\n  setDensity() {\n    const options = this.container.actualOptions;\n\n    for (const group in options.particles.groups) {\n      this.applyDensity(options.particles.groups[group], 0, group);\n    }\n\n    this.applyDensity(options.particles, options.manualParticles.length);\n  }\n\n  applyDensity(options, manualCount, group) {\n    var _a;\n\n    if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\n      return;\n    }\n\n    const numberOptions = options.number;\n    const densityFactor = this.initDensityFactor(numberOptions.density);\n    const optParticlesNumber = numberOptions.value;\n    const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\n    const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\n    const particlesCount = Math.min(this.count, this.array.filter(t => t.group === group).length);\n    this.limit = numberOptions.limit * densityFactor;\n\n    if (particlesCount < particlesNumber) {\n      this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\n    } else if (particlesCount > particlesNumber) {\n      this.removeQuantity(particlesCount - particlesNumber, group);\n    }\n  }\n\n  initDensityFactor(densityOptions) {\n    const container = this.container;\n\n    if (!container.canvas.element || !densityOptions.enable) {\n      return 1;\n    }\n\n    const canvas = container.canvas.element;\n    const pxRatio = container.retina.pixelRatio;\n    return canvas.width * canvas.height / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\n  }\n\n  pushParticle(position, overrideOptions, group, initializer) {\n    try {\n      const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\n      let canAdd = true;\n\n      if (initializer) {\n        canAdd = initializer(particle);\n      }\n\n      if (!canAdd) {\n        return;\n      }\n\n      this.array.push(particle);\n      this.zArray.push(particle);\n      this.nextId++;\n      return particle;\n    } catch (e) {\n      console.warn(`error adding particle: ${e}`);\n      return;\n    }\n  }\n\n}\n\nexports.Particles = Particles;","map":{"version":3,"sources":["C:/Users/Tiago/personal-folio/node_modules/tsparticles/Core/Particles.js"],"names":["Object","defineProperty","exports","value","Particles","Particle_1","require","Utils_1","InteractionManager_1","ParticlesOptions_1","Mover_1","constructor","container","nextId","array","zArray","mover","Mover","limit","needsSort","lastZIndex","linksFreq","Map","trianglesFreq","interactionManager","InteractionManager","canvasSize","canvas","size","linksColors","quadTree","QuadTree","Rectangle","width","height","updaters","Plugins","getUpdaters","count","length","init","_a","options","actualOptions","handled","plugin","plugins","particlesInitialization","undefined","addManualParticles","group","particles","groups","groupOptions","i","j","number","addParticle","pathGenerator","redraw","clear","draw","factor","removeAt","index","quantity","override","deleted","particle","destroy","splice","zIdx","indexOf","remove","update","delta","particlesToDelete","resizeFactor","position","x","y","destroyed","particleUpdate","move","push","insert","Point","getPosition","externalInteract","updater","spawning","particlesInteract","sort","a","b","z","id","drawPlugin","p","nb","mouse","overrideOptions","pushing","density","countToRemove","removeQuantity","pushParticle","addSplitParticle","parent","splitOptions","split","ParticlesOptions","load","getRangeValue","color","hsl","getFillColor","min","max","offset","sizeOffset","setRangeValue","randomInRange","velocity","splitCount","unbreakable","setTimeout","getLinkFrequency","p1","p2","key","Math","res","get","random","set","getTriangleFrequency","p3","id1","id2","id3","manualParticles","pos","setDensity","applyDensity","manualCount","enable","numberOptions","densityFactor","initDensityFactor","optParticlesNumber","optParticlesLimit","particlesNumber","particlesCount","filter","t","abs","densityOptions","element","pxRatio","retina","pixelRatio","pow","area","initializer","Particle","canAdd","e","console","warn"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,SAAR,GAAoB,KAAK,CAAzB;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,sBAAD,CAApC;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,+CAAD,CAAlC;;AACA,MAAMI,OAAO,GAAGJ,OAAO,CAAC,kBAAD,CAAvB;;AACA,MAAMF,SAAN,CAAgB;AACZO,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKA,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,KAAL,GAAa,IAAIN,OAAO,CAACO,KAAZ,CAAkBL,SAAlB,CAAb;AACA,SAAKM,KAAL,GAAa,CAAb;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACA,SAAKC,aAAL,GAAqB,IAAID,GAAJ,EAArB;AACA,SAAKE,kBAAL,GAA0B,IAAIhB,oBAAoB,CAACiB,kBAAzB,CAA4Cb,SAA5C,CAA1B;AACA,UAAMc,UAAU,GAAG,KAAKd,SAAL,CAAee,MAAf,CAAsBC,IAAzC;AACA,SAAKC,WAAL,GAAmB,IAAIP,GAAJ,EAAnB;AACA,SAAKQ,QAAL,GAAgB,IAAIvB,OAAO,CAACwB,QAAZ,CAAqB,IAAIxB,OAAO,CAACyB,SAAZ,CAAsB,CAACN,UAAU,CAACO,KAAZ,GAAoB,CAA1C,EAA6C,CAACP,UAAU,CAACQ,MAAZ,GAAqB,CAAlE,EAAsER,UAAU,CAACO,KAAX,GAAmB,CAApB,GAAyB,CAA9F,EAAkGP,UAAU,CAACQ,MAAX,GAAoB,CAArB,GAA0B,CAA3H,CAArB,EAAoJ,CAApJ,CAAhB;AACA,SAAKC,QAAL,GAAgB5B,OAAO,CAAC6B,OAAR,CAAgBC,WAAhB,CAA4BzB,SAA5B,CAAhB;AACH;;AACQ,MAAL0B,KAAK,GAAG;AACR,WAAO,KAAKxB,KAAL,CAAWyB,MAAlB;AACH;;AACDC,EAAAA,IAAI,GAAG;AACH,QAAIC,EAAJ;;AACA,UAAM7B,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAM8B,OAAO,GAAG9B,SAAS,CAAC+B,aAA1B;AACA,SAAKvB,UAAL,GAAkB,CAAlB;AACA,SAAKD,SAAL,GAAiB,KAAjB;AACA,SAAKE,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AACA,SAAKC,aAAL,GAAqB,IAAID,GAAJ,EAArB;AACA,QAAIsB,OAAO,GAAG,KAAd;;AACA,SAAK,MAAM,GAAGC,MAAH,CAAX,IAAyBjC,SAAS,CAACkC,OAAnC,EAA4C;AACxC,UAAID,MAAM,CAACE,uBAAP,KAAmCC,SAAvC,EAAkD;AAC9CJ,QAAAA,OAAO,GAAGC,MAAM,CAACE,uBAAP,EAAV;AACH;;AACD,UAAIH,OAAJ,EAAa;AACT;AACH;AACJ;;AACD,SAAKK,kBAAL;;AACA,QAAI,CAACL,OAAL,EAAc;AACV,WAAK,MAAMM,KAAX,IAAoBR,OAAO,CAACS,SAAR,CAAkBC,MAAtC,EAA8C;AAC1C,cAAMC,YAAY,GAAGX,OAAO,CAACS,SAAR,CAAkBC,MAAlB,CAAyBF,KAAzB,CAArB;;AACA,aAAK,IAAII,CAAC,GAAG,KAAKhB,KAAb,EAAoBiB,CAAC,GAAG,CAA7B,EAAgCA,CAAC,IAAI,CAACd,EAAE,GAAGY,YAAY,CAACG,MAAnB,MAA+B,IAA/B,IAAuCf,EAAE,KAAK,KAAK,CAAnD,GAAuD,KAAK,CAA5D,GAAgEA,EAAE,CAACtC,KAAvE,CAAD,IAAkFmD,CAAC,GAAGZ,OAAO,CAACS,SAAR,CAAkBK,MAAlB,CAAyBrD,KAA/I,EAAsJmD,CAAC,IAAIC,CAAC,EAA5J,EAAgK;AAC5J,eAAKE,WAAL,CAAiBT,SAAjB,EAA4BK,YAA5B,EAA0CH,KAA1C;AACH;AACJ;;AACD,WAAK,IAAII,CAAC,GAAG,KAAKhB,KAAlB,EAAyBgB,CAAC,GAAGZ,OAAO,CAACS,SAAR,CAAkBK,MAAlB,CAAyBrD,KAAtD,EAA6DmD,CAAC,EAA9D,EAAkE;AAC9D,aAAKG,WAAL;AACH;AACJ;;AACD7C,IAAAA,SAAS,CAAC8C,aAAV,CAAwBlB,IAAxB;AACH;;AACDmB,EAAAA,MAAM,GAAG;AACL,SAAKC,KAAL;AACA,SAAKpB,IAAL;AACA,SAAKqB,IAAL,CAAU;AAAE1D,MAAAA,KAAK,EAAE,CAAT;AAAY2D,MAAAA,MAAM,EAAE;AAApB,KAAV;AACH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,QAAQ,GAAG,CAAnB,EAAsBf,KAAtB,EAA6BgB,QAA7B,EAAuC;AAC3C,QAAI,EAAEF,KAAK,IAAI,CAAT,IAAcA,KAAK,IAAI,KAAK1B,KAA9B,CAAJ,EAA0C;AACtC;AACH;;AACD,QAAI6B,OAAO,GAAG,CAAd;;AACA,SAAK,IAAIb,CAAC,GAAGU,KAAb,EAAoBG,OAAO,GAAGF,QAAV,IAAsBX,CAAC,GAAG,KAAKhB,KAAnD,EAA0DgB,CAAC,EAA3D,EAA+D;AAC3D,YAAMc,QAAQ,GAAG,KAAKtD,KAAL,CAAWwC,CAAX,CAAjB;;AACA,UAAI,CAACc,QAAD,IAAaA,QAAQ,CAAClB,KAAT,KAAmBA,KAApC,EAA2C;AACvC;AACH;;AACDkB,MAAAA,QAAQ,CAACC,OAAT,CAAiBH,QAAjB;AACA,WAAKpD,KAAL,CAAWwD,MAAX,CAAkBhB,CAAC,EAAnB,EAAuB,CAAvB;AACA,YAAMiB,IAAI,GAAG,KAAKxD,MAAL,CAAYyD,OAAZ,CAAoBJ,QAApB,CAAb;AACA,WAAKrD,MAAL,CAAYuD,MAAZ,CAAmBC,IAAnB,EAAyB,CAAzB;AACAJ,MAAAA,OAAO;AACV;AACJ;;AACDM,EAAAA,MAAM,CAACL,QAAD,EAAWlB,KAAX,EAAkBgB,QAAlB,EAA4B;AAC9B,SAAKH,QAAL,CAAc,KAAKjD,KAAL,CAAW0D,OAAX,CAAmBJ,QAAnB,CAAd,EAA4CpB,SAA5C,EAAuDE,KAAvD,EAA8DgB,QAA9D;AACH;;AACDQ,EAAAA,MAAM,CAACC,KAAD,EAAQ;AACV,UAAM/D,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAMgE,iBAAiB,GAAG,EAA1B;AACAhE,IAAAA,SAAS,CAAC8C,aAAV,CAAwBgB,MAAxB;;AACA,SAAK,MAAM,GAAG7B,MAAH,CAAX,IAAyBjC,SAAS,CAACkC,OAAnC,EAA4C;AACxC,UAAID,MAAM,CAAC6B,MAAP,KAAkB1B,SAAtB,EAAiC;AAC7BH,QAAAA,MAAM,CAAC6B,MAAP,CAAcC,KAAd;AACH;AACJ;;AACD,SAAK,MAAMP,QAAX,IAAuB,KAAKtD,KAA5B,EAAmC;AAC/B,YAAM+D,YAAY,GAAG,KAAKjE,SAAL,CAAee,MAAf,CAAsBkD,YAA3C;;AACA,UAAIA,YAAJ,EAAkB;AACdT,QAAAA,QAAQ,CAACU,QAAT,CAAkBC,CAAlB,IAAuBF,YAAY,CAAC5C,KAApC;AACAmC,QAAAA,QAAQ,CAACU,QAAT,CAAkBE,CAAlB,IAAuBH,YAAY,CAAC3C,MAApC;AACH;;AACD,WAAK,MAAM,GAAGW,MAAH,CAAX,IAAyB,KAAKjC,SAAL,CAAekC,OAAxC,EAAiD;AAC7C,YAAIsB,QAAQ,CAACa,SAAb,EAAwB;AACpB;AACH;;AACD,YAAIpC,MAAM,CAACqC,cAAX,EAA2B;AACvBrC,UAAAA,MAAM,CAACqC,cAAP,CAAsBd,QAAtB,EAAgCO,KAAhC;AACH;AACJ;;AACD,WAAK3D,KAAL,CAAWmE,IAAX,CAAgBf,QAAhB,EAA0BO,KAA1B;;AACA,UAAIP,QAAQ,CAACa,SAAb,EAAwB;AACpBL,QAAAA,iBAAiB,CAACQ,IAAlB,CAAuBhB,QAAvB;AACA;AACH;;AACD,WAAKtC,QAAL,CAAcuD,MAAd,CAAqB,IAAI9E,OAAO,CAAC+E,KAAZ,CAAkBlB,QAAQ,CAACmB,WAAT,EAAlB,EAA0CnB,QAA1C,CAArB;AACH;;AACD,SAAK,MAAMA,QAAX,IAAuBQ,iBAAvB,EAA0C;AACtC,WAAKH,MAAL,CAAYL,QAAZ;AACH;;AACD,SAAK5C,kBAAL,CAAwBgE,gBAAxB,CAAyCb,KAAzC;;AACA,SAAK,MAAMP,QAAX,IAAuB,KAAKxD,SAAL,CAAeuC,SAAf,CAAyBrC,KAAhD,EAAuD;AACnD,WAAK,MAAM2E,OAAX,IAAsB,KAAKtD,QAA3B,EAAqC;AACjCsD,QAAAA,OAAO,CAACf,MAAR,CAAeN,QAAf,EAAyBO,KAAzB;AACH;;AACD,UAAI,CAACP,QAAQ,CAACa,SAAV,IAAuB,CAACb,QAAQ,CAACsB,QAArC,EAA+C;AAC3C,aAAKlE,kBAAL,CAAwBmE,iBAAxB,CAA0CvB,QAA1C,EAAoDO,KAApD;AACH;AACJ;;AACD,WAAO/D,SAAS,CAACe,MAAV,CAAiBkD,YAAxB;AACH;;AACDhB,EAAAA,IAAI,CAACc,KAAD,EAAQ;AACR,UAAM/D,SAAS,GAAG,KAAKA,SAAvB;AACAA,IAAAA,SAAS,CAACe,MAAV,CAAiBiC,KAAjB;AACA,UAAMlC,UAAU,GAAG,KAAKd,SAAL,CAAee,MAAf,CAAsBC,IAAzC;AACA,SAAKE,QAAL,GAAgB,IAAIvB,OAAO,CAACwB,QAAZ,CAAqB,IAAIxB,OAAO,CAACyB,SAAZ,CAAsB,CAACN,UAAU,CAACO,KAAZ,GAAoB,CAA1C,EAA6C,CAACP,UAAU,CAACQ,MAAZ,GAAqB,CAAlE,EAAsER,UAAU,CAACO,KAAX,GAAmB,CAApB,GAAyB,CAA9F,EAAkGP,UAAU,CAACQ,MAAX,GAAoB,CAArB,GAA0B,CAA3H,CAArB,EAAoJ,CAApJ,CAAhB;AACA,SAAKwC,MAAL,CAAYC,KAAZ;;AACA,QAAI,KAAKxD,SAAT,EAAoB;AAChB,WAAKJ,MAAL,CAAY6E,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAAChB,QAAF,CAAWiB,CAAX,GAAeF,CAAC,CAACf,QAAF,CAAWiB,CAA1B,IAA+BF,CAAC,CAACG,EAAF,GAAOF,CAAC,CAACE,EAAnE;AACA,WAAK5E,UAAL,GAAkB,KAAKL,MAAL,CAAY,KAAKA,MAAL,CAAYwB,MAAZ,GAAqB,CAAjC,EAAoCuC,QAApC,CAA6CiB,CAA/D;AACA,WAAK5E,SAAL,GAAiB,KAAjB;AACH;;AACD,SAAK,MAAM,GAAG0B,MAAH,CAAX,IAAyBjC,SAAS,CAACkC,OAAnC,EAA4C;AACxClC,MAAAA,SAAS,CAACe,MAAV,CAAiBsE,UAAjB,CAA4BpD,MAA5B,EAAoC8B,KAApC;AACH;;AACD,SAAK,MAAMuB,CAAX,IAAgB,KAAKnF,MAArB,EAA6B;AACzBmF,MAAAA,CAAC,CAACrC,IAAF,CAAOc,KAAP;AACH;AACJ;;AACDf,EAAAA,KAAK,GAAG;AACJ,SAAK9C,KAAL,GAAa,EAAb;AACA,SAAKC,MAAL,GAAc,EAAd;AACH;;AACDqE,EAAAA,IAAI,CAACe,EAAD,EAAKC,KAAL,EAAYC,eAAZ,EAA6BnD,KAA7B,EAAoC;AACpC,SAAKoD,OAAL,GAAe,IAAf;;AACA,SAAK,IAAIhD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG6C,EAApB,EAAwB7C,CAAC,EAAzB,EAA6B;AACzB,WAAKG,WAAL,CAAiB2C,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACtB,QAArE,EAA+EuB,eAA/E,EAAgGnD,KAAhG;AACH;;AACD,SAAKoD,OAAL,GAAe,KAAf;AACH;;AACD7C,EAAAA,WAAW,CAACqB,QAAD,EAAWuB,eAAX,EAA4BnD,KAA5B,EAAmC;AAC1C,UAAMtC,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAM8B,OAAO,GAAG9B,SAAS,CAAC+B,aAA1B;AACA,UAAMzB,KAAK,GAAGwB,OAAO,CAACS,SAAR,CAAkBK,MAAlB,CAAyBtC,KAAzB,GAAiCN,SAAS,CAAC2F,OAAzD;;AACA,QAAIrF,KAAK,GAAG,CAAZ,EAAe;AACX,YAAMsF,aAAa,GAAG,KAAKlE,KAAL,GAAa,CAAb,GAAiBpB,KAAvC;;AACA,UAAIsF,aAAa,GAAG,CAApB,EAAuB;AACnB,aAAKC,cAAL,CAAoBD,aAApB;AACH;AACJ;;AACD,WAAO,KAAKE,YAAL,CAAkB5B,QAAlB,EAA4BuB,eAA5B,EAA6CnD,KAA7C,CAAP;AACH;;AACDyD,EAAAA,gBAAgB,CAACC,MAAD,EAAS;AACrB,UAAMC,YAAY,GAAGD,MAAM,CAAClE,OAAP,CAAe2B,OAAf,CAAuByC,KAA5C;AACA,UAAMpE,OAAO,GAAG,IAAIjC,kBAAkB,CAACsG,gBAAvB,EAAhB;AACArE,IAAAA,OAAO,CAACsE,IAAR,CAAaJ,MAAM,CAAClE,OAApB;AACA,UAAMoB,MAAM,GAAGvD,OAAO,CAAC0G,aAAR,CAAsBJ,YAAY,CAAC/C,MAAb,CAAoB3D,KAA1C,CAAf;AACAuC,IAAAA,OAAO,CAACwE,KAAR,CAAcF,IAAd,CAAmB;AACf7G,MAAAA,KAAK,EAAE;AACHgH,QAAAA,GAAG,EAAEP,MAAM,CAACQ,YAAP;AADF;AADQ,KAAnB;;AAKA,QAAI,OAAO1E,OAAO,CAACd,IAAR,CAAazB,KAApB,KAA8B,QAAlC,EAA4C;AACxCuC,MAAAA,OAAO,CAACd,IAAR,CAAazB,KAAb,IAAsB2D,MAAtB;AACH,KAFD,MAGK;AACDpB,MAAAA,OAAO,CAACd,IAAR,CAAazB,KAAb,CAAmBkH,GAAnB,IAA0BvD,MAA1B;AACApB,MAAAA,OAAO,CAACd,IAAR,CAAazB,KAAb,CAAmBmH,GAAnB,IAA0BxD,MAA1B;AACH;;AACDpB,IAAAA,OAAO,CAACsE,IAAR,CAAaH,YAAY,CAAC1D,SAA1B;AACA,UAAMoE,MAAM,GAAGV,YAAY,CAACW,UAAb,GAA0BjH,OAAO,CAACkH,aAAR,CAAsB,CAACb,MAAM,CAAChF,IAAP,CAAYzB,KAAnC,EAA0CyG,MAAM,CAAChF,IAAP,CAAYzB,KAAtD,CAA1B,GAAyF,CAAxG;AACA,UAAM2E,QAAQ,GAAG;AACbC,MAAAA,CAAC,EAAE6B,MAAM,CAAC9B,QAAP,CAAgBC,CAAhB,GAAoBxE,OAAO,CAACmH,aAAR,CAAsBH,MAAtB,CADV;AAEbvC,MAAAA,CAAC,EAAE4B,MAAM,CAAC9B,QAAP,CAAgBE,CAAhB,GAAoBzE,OAAO,CAACmH,aAAR,CAAsBH,MAAtB;AAFV,KAAjB;AAIA,WAAO,KAAKb,YAAL,CAAkB5B,QAAlB,EAA4BpC,OAA5B,EAAqCkE,MAAM,CAAC1D,KAA5C,EAAoDkB,QAAD,IAAc;AACpE,UAAIA,QAAQ,CAACxC,IAAT,CAAczB,KAAd,GAAsB,GAA1B,EAA+B;AAC3B,eAAO,KAAP;AACH;;AACDiE,MAAAA,QAAQ,CAACuD,QAAT,CAAkBpF,MAAlB,GAA2BhC,OAAO,CAACmH,aAAR,CAAsBnH,OAAO,CAACkH,aAAR,CAAsBb,MAAM,CAACe,QAAP,CAAgBpF,MAAtC,EAA8C6B,QAAQ,CAACuD,QAAT,CAAkBpF,MAAhE,CAAtB,CAA3B;AACA6B,MAAAA,QAAQ,CAACwD,UAAT,GAAsBhB,MAAM,CAACgB,UAAP,GAAoB,CAA1C;AACAxD,MAAAA,QAAQ,CAACyD,WAAT,GAAuB,IAAvB;AACAC,MAAAA,UAAU,CAAC,MAAM;AACb1D,QAAAA,QAAQ,CAACyD,WAAT,GAAuB,KAAvB;AACH,OAFS,EAEP,GAFO,CAAV;AAGA,aAAO,IAAP;AACH,KAXM,CAAP;AAYH;;AACDpB,EAAAA,cAAc,CAACxC,QAAD,EAAWf,KAAX,EAAkB;AAC5B,SAAKa,QAAL,CAAc,CAAd,EAAiBE,QAAjB,EAA2Bf,KAA3B;AACH;;AACD6E,EAAAA,gBAAgB,CAACC,EAAD,EAAKC,EAAL,EAAS;AACrB,UAAMC,GAAG,GAAI,GAAEC,IAAI,CAACd,GAAL,CAASW,EAAE,CAAChC,EAAZ,EAAgBiC,EAAE,CAACjC,EAAnB,CAAuB,IAAGmC,IAAI,CAACb,GAAL,CAASU,EAAE,CAAChC,EAAZ,EAAgBiC,EAAE,CAACjC,EAAnB,CAAuB,EAAhE;AACA,QAAIoC,GAAG,GAAG,KAAK/G,SAAL,CAAegH,GAAf,CAAmBH,GAAnB,CAAV;;AACA,QAAIE,GAAG,KAAKpF,SAAZ,EAAuB;AACnBoF,MAAAA,GAAG,GAAGD,IAAI,CAACG,MAAL,EAAN;AACA,WAAKjH,SAAL,CAAekH,GAAf,CAAmBL,GAAnB,EAAwBE,GAAxB;AACH;;AACD,WAAOA,GAAP;AACH;;AACDI,EAAAA,oBAAoB,CAACR,EAAD,EAAKC,EAAL,EAASQ,EAAT,EAAa;AAC7B,QAAI,CAACC,GAAD,EAAMC,GAAN,EAAWC,GAAX,IAAkB,CAACZ,EAAE,CAAChC,EAAJ,EAAQiC,EAAE,CAACjC,EAAX,EAAeyC,EAAE,CAACzC,EAAlB,CAAtB;;AACA,QAAI0C,GAAG,GAAGC,GAAV,EAAe;AACX,OAACA,GAAD,EAAMD,GAAN,IAAa,CAACA,GAAD,EAAMC,GAAN,CAAb;AACH;;AACD,QAAIA,GAAG,GAAGC,GAAV,EAAe;AACX,OAACA,GAAD,EAAMD,GAAN,IAAa,CAACA,GAAD,EAAMC,GAAN,CAAb;AACH;;AACD,QAAIF,GAAG,GAAGE,GAAV,EAAe;AACX,OAACA,GAAD,EAAMF,GAAN,IAAa,CAACA,GAAD,EAAME,GAAN,CAAb;AACH;;AACD,UAAMV,GAAG,GAAI,GAAEQ,GAAI,IAAGC,GAAI,IAAGC,GAAI,EAAjC;AACA,QAAIR,GAAG,GAAG,KAAK7G,aAAL,CAAmB8G,GAAnB,CAAuBH,GAAvB,CAAV;;AACA,QAAIE,GAAG,KAAKpF,SAAZ,EAAuB;AACnBoF,MAAAA,GAAG,GAAGD,IAAI,CAACG,MAAL,EAAN;AACA,WAAK/G,aAAL,CAAmBgH,GAAnB,CAAuBL,GAAvB,EAA4BE,GAA5B;AACH;;AACD,WAAOA,GAAP;AACH;;AACDnF,EAAAA,kBAAkB,GAAG;AACjB,UAAMrC,SAAS,GAAG,KAAKA,SAAvB;AACA,UAAM8B,OAAO,GAAG9B,SAAS,CAAC+B,aAA1B;;AACA,SAAK,MAAMyB,QAAX,IAAuB1B,OAAO,CAACmG,eAA/B,EAAgD;AAC5C,YAAMC,GAAG,GAAG1E,QAAQ,CAACU,QAAT,GACN;AACEC,QAAAA,CAAC,EAAGX,QAAQ,CAACU,QAAT,CAAkBC,CAAlB,GAAsBnE,SAAS,CAACe,MAAV,CAAiBC,IAAjB,CAAsBK,KAA7C,GAAsD,GAD3D;AAEE+C,QAAAA,CAAC,EAAGZ,QAAQ,CAACU,QAAT,CAAkBE,CAAlB,GAAsBpE,SAAS,CAACe,MAAV,CAAiBC,IAAjB,CAAsBM,MAA7C,GAAuD;AAF5D,OADM,GAKNc,SALN;AAMA,WAAKS,WAAL,CAAiBqF,GAAjB,EAAsB1E,QAAQ,CAAC1B,OAA/B;AACH;AACJ;;AACDqG,EAAAA,UAAU,GAAG;AACT,UAAMrG,OAAO,GAAG,KAAK9B,SAAL,CAAe+B,aAA/B;;AACA,SAAK,MAAMO,KAAX,IAAoBR,OAAO,CAACS,SAAR,CAAkBC,MAAtC,EAA8C;AAC1C,WAAK4F,YAAL,CAAkBtG,OAAO,CAACS,SAAR,CAAkBC,MAAlB,CAAyBF,KAAzB,CAAlB,EAAmD,CAAnD,EAAsDA,KAAtD;AACH;;AACD,SAAK8F,YAAL,CAAkBtG,OAAO,CAACS,SAA1B,EAAqCT,OAAO,CAACmG,eAAR,CAAwBtG,MAA7D;AACH;;AACDyG,EAAAA,YAAY,CAACtG,OAAD,EAAUuG,WAAV,EAAuB/F,KAAvB,EAA8B;AACtC,QAAIT,EAAJ;;AACA,QAAI,EAAE,CAACA,EAAE,GAAGC,OAAO,CAACc,MAAR,CAAe+C,OAArB,MAAkC,IAAlC,IAA0C9D,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACyG,MAAxE,CAAJ,EAAqF;AACjF;AACH;;AACD,UAAMC,aAAa,GAAGzG,OAAO,CAACc,MAA9B;AACA,UAAM4F,aAAa,GAAG,KAAKC,iBAAL,CAAuBF,aAAa,CAAC5C,OAArC,CAAtB;AACA,UAAM+C,kBAAkB,GAAGH,aAAa,CAAChJ,KAAzC;AACA,UAAMoJ,iBAAiB,GAAGJ,aAAa,CAACjI,KAAd,GAAsB,CAAtB,GAA0BiI,aAAa,CAACjI,KAAxC,GAAgDoI,kBAA1E;AACA,UAAME,eAAe,GAAGrB,IAAI,CAACd,GAAL,CAASiC,kBAAT,EAA6BC,iBAA7B,IAAkDH,aAAlD,GAAkEH,WAA1F;AACA,UAAMQ,cAAc,GAAGtB,IAAI,CAACd,GAAL,CAAS,KAAK/E,KAAd,EAAqB,KAAKxB,KAAL,CAAW4I,MAAX,CAAmBC,CAAD,IAAOA,CAAC,CAACzG,KAAF,KAAYA,KAArC,EAA4CX,MAAjE,CAAvB;AACA,SAAKrB,KAAL,GAAaiI,aAAa,CAACjI,KAAd,GAAsBkI,aAAnC;;AACA,QAAIK,cAAc,GAAGD,eAArB,EAAsC;AAClC,WAAKpE,IAAL,CAAU+C,IAAI,CAACyB,GAAL,CAASJ,eAAe,GAAGC,cAA3B,CAAV,EAAsDzG,SAAtD,EAAiEN,OAAjE,EAA0EQ,KAA1E;AACH,KAFD,MAGK,IAAIuG,cAAc,GAAGD,eAArB,EAAsC;AACvC,WAAK/C,cAAL,CAAoBgD,cAAc,GAAGD,eAArC,EAAsDtG,KAAtD;AACH;AACJ;;AACDmG,EAAAA,iBAAiB,CAACQ,cAAD,EAAiB;AAC9B,UAAMjJ,SAAS,GAAG,KAAKA,SAAvB;;AACA,QAAI,CAACA,SAAS,CAACe,MAAV,CAAiBmI,OAAlB,IAA6B,CAACD,cAAc,CAACX,MAAjD,EAAyD;AACrD,aAAO,CAAP;AACH;;AACD,UAAMvH,MAAM,GAAGf,SAAS,CAACe,MAAV,CAAiBmI,OAAhC;AACA,UAAMC,OAAO,GAAGnJ,SAAS,CAACoJ,MAAV,CAAiBC,UAAjC;AACA,WAAQtI,MAAM,CAACM,KAAP,GAAeN,MAAM,CAACO,MAAvB,IAAkC2H,cAAc,CAAC/F,MAAf,GAAwBqE,IAAI,CAAC+B,GAAL,CAASH,OAAT,EAAkB,CAAlB,CAAxB,GAA+CF,cAAc,CAACM,IAAhG,CAAP;AACH;;AACDzD,EAAAA,YAAY,CAAC5B,QAAD,EAAWuB,eAAX,EAA4BnD,KAA5B,EAAmCkH,WAAnC,EAAgD;AACxD,QAAI;AACA,YAAMhG,QAAQ,GAAG,IAAI/D,UAAU,CAACgK,QAAf,CAAwB,KAAKxJ,MAA7B,EAAqC,KAAKD,SAA1C,EAAqDkE,QAArD,EAA+DuB,eAA/D,EAAgFnD,KAAhF,CAAjB;AACA,UAAIoH,MAAM,GAAG,IAAb;;AACA,UAAIF,WAAJ,EAAiB;AACbE,QAAAA,MAAM,GAAGF,WAAW,CAAChG,QAAD,CAApB;AACH;;AACD,UAAI,CAACkG,MAAL,EAAa;AACT;AACH;;AACD,WAAKxJ,KAAL,CAAWsE,IAAX,CAAgBhB,QAAhB;AACA,WAAKrD,MAAL,CAAYqE,IAAZ,CAAiBhB,QAAjB;AACA,WAAKvD,MAAL;AACA,aAAOuD,QAAP;AACH,KAbD,CAcA,OAAOmG,CAAP,EAAU;AACNC,MAAAA,OAAO,CAACC,IAAR,CAAc,0BAAyBF,CAAE,EAAzC;AACA;AACH;AACJ;;AAxSW;;AA0ShBrK,OAAO,CAACE,SAAR,GAAoBA,SAApB","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Particles = void 0;\r\nconst Particle_1 = require(\"./Particle\");\r\nconst Utils_1 = require(\"../Utils\");\r\nconst InteractionManager_1 = require(\"./InteractionManager\");\r\nconst ParticlesOptions_1 = require(\"../Options/Classes/Particles/ParticlesOptions\");\r\nconst Mover_1 = require(\"./Particle/Mover\");\r\nclass Particles {\r\n    constructor(container) {\r\n        this.container = container;\r\n        this.nextId = 0;\r\n        this.array = [];\r\n        this.zArray = [];\r\n        this.mover = new Mover_1.Mover(container);\r\n        this.limit = 0;\r\n        this.needsSort = false;\r\n        this.lastZIndex = 0;\r\n        this.linksFreq = new Map();\r\n        this.trianglesFreq = new Map();\r\n        this.interactionManager = new InteractionManager_1.InteractionManager(container);\r\n        const canvasSize = this.container.canvas.size;\r\n        this.linksColors = new Map();\r\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\r\n        this.updaters = Utils_1.Plugins.getUpdaters(container);\r\n    }\r\n    get count() {\r\n        return this.array.length;\r\n    }\r\n    init() {\r\n        var _a;\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        this.lastZIndex = 0;\r\n        this.needsSort = false;\r\n        this.linksFreq = new Map();\r\n        this.trianglesFreq = new Map();\r\n        let handled = false;\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.particlesInitialization !== undefined) {\r\n                handled = plugin.particlesInitialization();\r\n            }\r\n            if (handled) {\r\n                break;\r\n            }\r\n        }\r\n        this.addManualParticles();\r\n        if (!handled) {\r\n            for (const group in options.particles.groups) {\r\n                const groupOptions = options.particles.groups[group];\r\n                for (let i = this.count, j = 0; j < ((_a = groupOptions.number) === null || _a === void 0 ? void 0 : _a.value) && i < options.particles.number.value; i++, j++) {\r\n                    this.addParticle(undefined, groupOptions, group);\r\n                }\r\n            }\r\n            for (let i = this.count; i < options.particles.number.value; i++) {\r\n                this.addParticle();\r\n            }\r\n        }\r\n        container.pathGenerator.init();\r\n    }\r\n    redraw() {\r\n        this.clear();\r\n        this.init();\r\n        this.draw({ value: 0, factor: 0 });\r\n    }\r\n    removeAt(index, quantity = 1, group, override) {\r\n        if (!(index >= 0 && index <= this.count)) {\r\n            return;\r\n        }\r\n        let deleted = 0;\r\n        for (let i = index; deleted < quantity && i < this.count; i++) {\r\n            const particle = this.array[i];\r\n            if (!particle || particle.group !== group) {\r\n                continue;\r\n            }\r\n            particle.destroy(override);\r\n            this.array.splice(i--, 1);\r\n            const zIdx = this.zArray.indexOf(particle);\r\n            this.zArray.splice(zIdx, 1);\r\n            deleted++;\r\n        }\r\n    }\r\n    remove(particle, group, override) {\r\n        this.removeAt(this.array.indexOf(particle), undefined, group, override);\r\n    }\r\n    update(delta) {\r\n        const container = this.container;\r\n        const particlesToDelete = [];\r\n        container.pathGenerator.update();\r\n        for (const [, plugin] of container.plugins) {\r\n            if (plugin.update !== undefined) {\r\n                plugin.update(delta);\r\n            }\r\n        }\r\n        for (const particle of this.array) {\r\n            const resizeFactor = this.container.canvas.resizeFactor;\r\n            if (resizeFactor) {\r\n                particle.position.x *= resizeFactor.width;\r\n                particle.position.y *= resizeFactor.height;\r\n            }\r\n            for (const [, plugin] of this.container.plugins) {\r\n                if (particle.destroyed) {\r\n                    break;\r\n                }\r\n                if (plugin.particleUpdate) {\r\n                    plugin.particleUpdate(particle, delta);\r\n                }\r\n            }\r\n            this.mover.move(particle, delta);\r\n            if (particle.destroyed) {\r\n                particlesToDelete.push(particle);\r\n                continue;\r\n            }\r\n            this.quadTree.insert(new Utils_1.Point(particle.getPosition(), particle));\r\n        }\r\n        for (const particle of particlesToDelete) {\r\n            this.remove(particle);\r\n        }\r\n        this.interactionManager.externalInteract(delta);\r\n        for (const particle of this.container.particles.array) {\r\n            for (const updater of this.updaters) {\r\n                updater.update(particle, delta);\r\n            }\r\n            if (!particle.destroyed && !particle.spawning) {\r\n                this.interactionManager.particlesInteract(particle, delta);\r\n            }\r\n        }\r\n        delete container.canvas.resizeFactor;\r\n    }\r\n    draw(delta) {\r\n        const container = this.container;\r\n        container.canvas.clear();\r\n        const canvasSize = this.container.canvas.size;\r\n        this.quadTree = new Utils_1.QuadTree(new Utils_1.Rectangle(-canvasSize.width / 4, -canvasSize.height / 4, (canvasSize.width * 3) / 2, (canvasSize.height * 3) / 2), 4);\r\n        this.update(delta);\r\n        if (this.needsSort) {\r\n            this.zArray.sort((a, b) => b.position.z - a.position.z || a.id - b.id);\r\n            this.lastZIndex = this.zArray[this.zArray.length - 1].position.z;\r\n            this.needsSort = false;\r\n        }\r\n        for (const [, plugin] of container.plugins) {\r\n            container.canvas.drawPlugin(plugin, delta);\r\n        }\r\n        for (const p of this.zArray) {\r\n            p.draw(delta);\r\n        }\r\n    }\r\n    clear() {\r\n        this.array = [];\r\n        this.zArray = [];\r\n    }\r\n    push(nb, mouse, overrideOptions, group) {\r\n        this.pushing = true;\r\n        for (let i = 0; i < nb; i++) {\r\n            this.addParticle(mouse === null || mouse === void 0 ? void 0 : mouse.position, overrideOptions, group);\r\n        }\r\n        this.pushing = false;\r\n    }\r\n    addParticle(position, overrideOptions, group) {\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        const limit = options.particles.number.limit * container.density;\r\n        if (limit > 0) {\r\n            const countToRemove = this.count + 1 - limit;\r\n            if (countToRemove > 0) {\r\n                this.removeQuantity(countToRemove);\r\n            }\r\n        }\r\n        return this.pushParticle(position, overrideOptions, group);\r\n    }\r\n    addSplitParticle(parent) {\r\n        const splitOptions = parent.options.destroy.split;\r\n        const options = new ParticlesOptions_1.ParticlesOptions();\r\n        options.load(parent.options);\r\n        const factor = Utils_1.getRangeValue(splitOptions.factor.value);\r\n        options.color.load({\r\n            value: {\r\n                hsl: parent.getFillColor(),\r\n            },\r\n        });\r\n        if (typeof options.size.value === \"number\") {\r\n            options.size.value /= factor;\r\n        }\r\n        else {\r\n            options.size.value.min /= factor;\r\n            options.size.value.max /= factor;\r\n        }\r\n        options.load(splitOptions.particles);\r\n        const offset = splitOptions.sizeOffset ? Utils_1.setRangeValue(-parent.size.value, parent.size.value) : 0;\r\n        const position = {\r\n            x: parent.position.x + Utils_1.randomInRange(offset),\r\n            y: parent.position.y + Utils_1.randomInRange(offset),\r\n        };\r\n        return this.pushParticle(position, options, parent.group, (particle) => {\r\n            if (particle.size.value < 0.5) {\r\n                return false;\r\n            }\r\n            particle.velocity.length = Utils_1.randomInRange(Utils_1.setRangeValue(parent.velocity.length, particle.velocity.length));\r\n            particle.splitCount = parent.splitCount + 1;\r\n            particle.unbreakable = true;\r\n            setTimeout(() => {\r\n                particle.unbreakable = false;\r\n            }, 500);\r\n            return true;\r\n        });\r\n    }\r\n    removeQuantity(quantity, group) {\r\n        this.removeAt(0, quantity, group);\r\n    }\r\n    getLinkFrequency(p1, p2) {\r\n        const key = `${Math.min(p1.id, p2.id)}_${Math.max(p1.id, p2.id)}`;\r\n        let res = this.linksFreq.get(key);\r\n        if (res === undefined) {\r\n            res = Math.random();\r\n            this.linksFreq.set(key, res);\r\n        }\r\n        return res;\r\n    }\r\n    getTriangleFrequency(p1, p2, p3) {\r\n        let [id1, id2, id3] = [p1.id, p2.id, p3.id];\r\n        if (id1 > id2) {\r\n            [id2, id1] = [id1, id2];\r\n        }\r\n        if (id2 > id3) {\r\n            [id3, id2] = [id2, id3];\r\n        }\r\n        if (id1 > id3) {\r\n            [id3, id1] = [id1, id3];\r\n        }\r\n        const key = `${id1}_${id2}_${id3}`;\r\n        let res = this.trianglesFreq.get(key);\r\n        if (res === undefined) {\r\n            res = Math.random();\r\n            this.trianglesFreq.set(key, res);\r\n        }\r\n        return res;\r\n    }\r\n    addManualParticles() {\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        for (const particle of options.manualParticles) {\r\n            const pos = particle.position\r\n                ? {\r\n                    x: (particle.position.x * container.canvas.size.width) / 100,\r\n                    y: (particle.position.y * container.canvas.size.height) / 100,\r\n                }\r\n                : undefined;\r\n            this.addParticle(pos, particle.options);\r\n        }\r\n    }\r\n    setDensity() {\r\n        const options = this.container.actualOptions;\r\n        for (const group in options.particles.groups) {\r\n            this.applyDensity(options.particles.groups[group], 0, group);\r\n        }\r\n        this.applyDensity(options.particles, options.manualParticles.length);\r\n    }\r\n    applyDensity(options, manualCount, group) {\r\n        var _a;\r\n        if (!((_a = options.number.density) === null || _a === void 0 ? void 0 : _a.enable)) {\r\n            return;\r\n        }\r\n        const numberOptions = options.number;\r\n        const densityFactor = this.initDensityFactor(numberOptions.density);\r\n        const optParticlesNumber = numberOptions.value;\r\n        const optParticlesLimit = numberOptions.limit > 0 ? numberOptions.limit : optParticlesNumber;\r\n        const particlesNumber = Math.min(optParticlesNumber, optParticlesLimit) * densityFactor + manualCount;\r\n        const particlesCount = Math.min(this.count, this.array.filter((t) => t.group === group).length);\r\n        this.limit = numberOptions.limit * densityFactor;\r\n        if (particlesCount < particlesNumber) {\r\n            this.push(Math.abs(particlesNumber - particlesCount), undefined, options, group);\r\n        }\r\n        else if (particlesCount > particlesNumber) {\r\n            this.removeQuantity(particlesCount - particlesNumber, group);\r\n        }\r\n    }\r\n    initDensityFactor(densityOptions) {\r\n        const container = this.container;\r\n        if (!container.canvas.element || !densityOptions.enable) {\r\n            return 1;\r\n        }\r\n        const canvas = container.canvas.element;\r\n        const pxRatio = container.retina.pixelRatio;\r\n        return (canvas.width * canvas.height) / (densityOptions.factor * Math.pow(pxRatio, 2) * densityOptions.area);\r\n    }\r\n    pushParticle(position, overrideOptions, group, initializer) {\r\n        try {\r\n            const particle = new Particle_1.Particle(this.nextId, this.container, position, overrideOptions, group);\r\n            let canAdd = true;\r\n            if (initializer) {\r\n                canAdd = initializer(particle);\r\n            }\r\n            if (!canAdd) {\r\n                return;\r\n            }\r\n            this.array.push(particle);\r\n            this.zArray.push(particle);\r\n            this.nextId++;\r\n            return particle;\r\n        }\r\n        catch (e) {\r\n            console.warn(`error adding particle: ${e}`);\r\n            return;\r\n        }\r\n    }\r\n}\r\nexports.Particles = Particles;\r\n"]},"metadata":{},"sourceType":"script"}