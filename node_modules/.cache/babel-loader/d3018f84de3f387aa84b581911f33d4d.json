{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Mover = void 0;\n\nconst Utils_1 = require(\"../../Utils\");\n\nconst Enums_1 = require(\"../../Enums\");\n\nfunction applyDistance(particle) {\n  const initialPosition = particle.initialPosition;\n  const {\n    dx,\n    dy\n  } = Utils_1.getDistances(initialPosition, particle.position);\n  const dxFixed = Math.abs(dx),\n        dyFixed = Math.abs(dy);\n  const hDistance = particle.maxDistance.horizontal;\n  const vDistance = particle.maxDistance.vertical;\n\n  if (!hDistance && !vDistance) {\n    return;\n  }\n\n  if ((hDistance && dxFixed >= hDistance || vDistance && dyFixed >= vDistance) && !particle.misplaced) {\n    particle.misplaced = !!hDistance && dxFixed > hDistance || !!vDistance && dyFixed > vDistance;\n\n    if (hDistance) {\n      particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n    }\n\n    if (vDistance) {\n      particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n    }\n  } else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n    particle.misplaced = false;\n  } else if (particle.misplaced) {\n    const pos = particle.position,\n          vel = particle.velocity;\n\n    if (hDistance && (pos.x < initialPosition.x && vel.x < 0 || pos.x > initialPosition.x && vel.x > 0)) {\n      vel.x *= -Math.random();\n    }\n\n    if (vDistance && (pos.y < initialPosition.y && vel.y < 0 || pos.y > initialPosition.y && vel.y > 0)) {\n      vel.y *= -Math.random();\n    }\n  }\n}\n\nclass Mover {\n  constructor(container) {\n    this.container = container;\n  }\n\n  move(particle, delta) {\n    particle.bubble.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (particle.destroyed) {\n        break;\n      }\n\n      if (plugin.particleUpdate) {\n        plugin.particleUpdate(particle, delta);\n      }\n    }\n\n    if (particle.destroyed) {\n      return;\n    }\n\n    this.moveParticle(particle, delta);\n    this.moveParallax(particle);\n  }\n\n  moveParticle(particle, delta) {\n    var _a, _b, _c;\n\n    const particlesOptions = particle.options;\n\n    if (!particlesOptions.move.enable) {\n      return;\n    }\n\n    const container = this.container;\n    const slowFactor = this.getProximitySpeedFactor(particle);\n    const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) * container.retina.reduceFactor;\n    const maxSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\n    const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\n    const moveSpeed = baseSpeed / 2 * sizeFactor * slowFactor * delta.factor;\n    const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\n    this.applyPath(particle, delta);\n    const gravityOptions = particlesOptions.move.gravity;\n    const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\n\n    if (gravityOptions.enable) {\n      particle.velocity.y += gravityFactor * (gravityOptions.acceleration * delta.factor) / (60 * moveSpeed);\n    }\n\n    if (moveSpeed) {\n      particle.velocity.x += moveDrift * delta.factor / (60 * moveSpeed);\n    }\n\n    particle.velocity.multTo(1 - particle.options.move.decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\n\n    if (gravityOptions.enable && (!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed || gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed) && gravityOptions.maxSpeed > 0) {\n      velocity.y = gravityFactor * maxSpeed;\n\n      if (moveSpeed) {\n        particle.velocity.y = velocity.y / moveSpeed;\n      }\n    }\n\n    const zIndexOptions = particle.options.zIndex,\n          zVelocityFactor = 1 - zIndexOptions.velocityRate * particle.zIndexFactor;\n    velocity.multTo(zVelocityFactor);\n    particle.position.addTo(velocity);\n\n    if (particlesOptions.move.vibrate) {\n      particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\n      particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\n    }\n\n    const initialPosition = particle.initialPosition;\n    const initialDistance = Utils_1.getDistance(initialPosition, particle.position);\n\n    if (particle.maxDistance) {\n      if (initialDistance >= particle.maxDistance && !particle.misplaced) {\n        particle.misplaced = initialDistance > particle.maxDistance;\n        particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\n        particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\n      } else if (initialDistance < particle.maxDistance && particle.misplaced) {\n        particle.misplaced = false;\n      } else if (particle.misplaced) {\n        if (particle.position.x < initialPosition.x && particle.velocity.x < 0 || particle.position.x > initialPosition.x && particle.velocity.x > 0) {\n          particle.velocity.x *= -Math.random();\n        }\n\n        if (particle.position.y < initialPosition.y && particle.velocity.y < 0 || particle.position.y > initialPosition.y && particle.velocity.y > 0) {\n          particle.velocity.y *= -Math.random();\n        }\n      }\n    }\n\n    applyDistance(particle);\n  }\n\n  applyPath(particle, delta) {\n    const particlesOptions = particle.options;\n    const pathOptions = particlesOptions.move.path;\n    const pathEnabled = pathOptions.enable;\n\n    if (!pathEnabled) {\n      return;\n    }\n\n    const container = this.container;\n\n    if (particle.lastPathTime <= particle.pathDelay) {\n      particle.lastPathTime += delta.value;\n      return;\n    }\n\n    let generator = container.pathGenerator;\n\n    if (pathOptions.generator) {\n      const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\n\n      if (customGenerator) {\n        generator = customGenerator;\n      }\n    }\n\n    const path = generator.generate(particle);\n    particle.velocity.addTo(path);\n\n    if (pathOptions.clamp) {\n      particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\n      particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\n    }\n\n    particle.lastPathTime -= particle.pathDelay;\n  }\n\n  moveParallax(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n\n    if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\n      return;\n    }\n\n    const parallaxForce = options.interactivity.events.onHover.parallax.force;\n    const mousePos = container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return;\n    }\n\n    const canvasCenter = {\n      x: container.canvas.size.width / 2,\n      y: container.canvas.size.height / 2\n    };\n    const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\n    const factor = particle.getRadius() / parallaxForce;\n    const tmp = {\n      x: (mousePos.x - canvasCenter.x) * factor,\n      y: (mousePos.y - canvasCenter.y) * factor\n    };\n    particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\n    particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\n  }\n\n  getProximitySpeedFactor(particle) {\n    const container = this.container;\n    const options = container.actualOptions;\n    const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\n\n    if (!active) {\n      return 1;\n    }\n\n    const mousePos = this.container.interactivity.mouse.position;\n\n    if (!mousePos) {\n      return 1;\n    }\n\n    const particlePos = particle.getPosition();\n    const dist = Utils_1.getDistance(mousePos, particlePos);\n    const radius = container.retina.slowModeRadius;\n\n    if (dist > radius) {\n      return 1;\n    }\n\n    const proximityFactor = dist / radius || 0;\n    const slowFactor = options.interactivity.modes.slow.factor;\n    return proximityFactor / slowFactor;\n  }\n\n}\n\nexports.Mover = Mover;","map":{"version":3,"sources":["C:/Users/Tiago/personal-folio/node_modules/tsparticles/Core/Particle/Mover.js"],"names":["Object","defineProperty","exports","value","Mover","Utils_1","require","Enums_1","applyDistance","particle","initialPosition","dx","dy","getDistances","position","dxFixed","Math","abs","dyFixed","hDistance","maxDistance","horizontal","vDistance","vertical","misplaced","velocity","x","y","pos","vel","random","constructor","container","move","delta","bubble","inRange","plugin","plugins","destroyed","particleUpdate","moveParticle","moveParallax","_a","_b","_c","particlesOptions","options","enable","slowFactor","getProximitySpeedFactor","baseSpeed","moveSpeed","getRangeValue","speed","retina","pixelRatio","reduceFactor","maxSize","getRangeMax","size","sizeFactor","getRadius","factor","moveDrift","drift","applyPath","gravityOptions","gravity","gravityFactor","inverse","acceleration","multTo","decay","mult","maxSpeed","zIndexOptions","zIndex","zVelocityFactor","velocityRate","zIndexFactor","addTo","vibrate","sin","cos","initialDistance","getDistance","pathOptions","path","pathEnabled","lastPathTime","pathDelay","generator","pathGenerator","customGenerator","Plugins","getPathGenerator","generate","clamp","actualOptions","isSsr","interactivity","events","onHover","parallax","parallaxForce","force","mousePos","mouse","canvasCenter","canvas","width","height","parallaxSmooth","smooth","tmp","offset","active","isInArray","HoverMode","slow","mode","particlePos","getPosition","dist","radius","slowModeRadius","proximityFactor","modes"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Mover = void 0;\r\nconst Utils_1 = require(\"../../Utils\");\r\nconst Enums_1 = require(\"../../Enums\");\r\nfunction applyDistance(particle) {\r\n    const initialPosition = particle.initialPosition;\r\n    const { dx, dy } = Utils_1.getDistances(initialPosition, particle.position);\r\n    const dxFixed = Math.abs(dx), dyFixed = Math.abs(dy);\r\n    const hDistance = particle.maxDistance.horizontal;\r\n    const vDistance = particle.maxDistance.vertical;\r\n    if (!hDistance && !vDistance) {\r\n        return;\r\n    }\r\n    if (((hDistance && dxFixed >= hDistance) || (vDistance && dyFixed >= vDistance)) && !particle.misplaced) {\r\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\r\n        if (hDistance) {\r\n            particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\r\n        }\r\n        if (vDistance) {\r\n            particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\r\n        }\r\n    }\r\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\r\n        particle.misplaced = false;\r\n    }\r\n    else if (particle.misplaced) {\r\n        const pos = particle.position, vel = particle.velocity;\r\n        if (hDistance && ((pos.x < initialPosition.x && vel.x < 0) || (pos.x > initialPosition.x && vel.x > 0))) {\r\n            vel.x *= -Math.random();\r\n        }\r\n        if (vDistance && ((pos.y < initialPosition.y && vel.y < 0) || (pos.y > initialPosition.y && vel.y > 0))) {\r\n            vel.y *= -Math.random();\r\n        }\r\n    }\r\n}\r\nclass Mover {\r\n    constructor(container) {\r\n        this.container = container;\r\n    }\r\n    move(particle, delta) {\r\n        particle.bubble.inRange = false;\r\n        for (const [, plugin] of this.container.plugins) {\r\n            if (particle.destroyed) {\r\n                break;\r\n            }\r\n            if (plugin.particleUpdate) {\r\n                plugin.particleUpdate(particle, delta);\r\n            }\r\n        }\r\n        if (particle.destroyed) {\r\n            return;\r\n        }\r\n        this.moveParticle(particle, delta);\r\n        this.moveParallax(particle);\r\n    }\r\n    moveParticle(particle, delta) {\r\n        var _a, _b, _c;\r\n        const particlesOptions = particle.options;\r\n        if (!particlesOptions.move.enable) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        const slowFactor = this.getProximitySpeedFactor(particle);\r\n        const baseSpeed = ((_a = particle.moveSpeed) !== null && _a !== void 0 ? _a : Utils_1.getRangeValue(particle.options.move.speed) * container.retina.pixelRatio) *\r\n            container.retina.reduceFactor;\r\n        const maxSize = Utils_1.getRangeMax(particle.options.size.value) * container.retina.pixelRatio;\r\n        const sizeFactor = particlesOptions.move.size ? particle.getRadius() / maxSize : 1;\r\n        const moveSpeed = (baseSpeed / 2) * sizeFactor * slowFactor * delta.factor;\r\n        const moveDrift = (_b = particle.moveDrift) !== null && _b !== void 0 ? _b : Utils_1.getRangeValue(particle.options.move.drift) * container.retina.pixelRatio;\r\n        this.applyPath(particle, delta);\r\n        const gravityOptions = particlesOptions.move.gravity;\r\n        const gravityFactor = gravityOptions.enable && gravityOptions.inverse ? -1 : 1;\r\n        if (gravityOptions.enable) {\r\n            particle.velocity.y += (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (60 * moveSpeed);\r\n        }\r\n        if (moveSpeed) {\r\n            particle.velocity.x += (moveDrift * delta.factor) / (60 * moveSpeed);\r\n        }\r\n        particle.velocity.multTo(1 - particle.options.move.decay);\r\n        const velocity = particle.velocity.mult(moveSpeed);\r\n        const maxSpeed = (_c = particle.maxSpeed) !== null && _c !== void 0 ? _c : container.retina.maxSpeed;\r\n        if (gravityOptions.enable &&\r\n            ((!gravityOptions.inverse && velocity.y >= 0 && velocity.y >= maxSpeed) ||\r\n                (gravityOptions.inverse && velocity.y <= 0 && velocity.y <= -maxSpeed)) &&\r\n            gravityOptions.maxSpeed > 0) {\r\n            velocity.y = gravityFactor * maxSpeed;\r\n            if (moveSpeed) {\r\n                particle.velocity.y = velocity.y / moveSpeed;\r\n            }\r\n        }\r\n        const zIndexOptions = particle.options.zIndex, zVelocityFactor = 1 - zIndexOptions.velocityRate * particle.zIndexFactor;\r\n        velocity.multTo(zVelocityFactor);\r\n        particle.position.addTo(velocity);\r\n        if (particlesOptions.move.vibrate) {\r\n            particle.position.x += Math.sin(particle.position.x * Math.cos(particle.position.y));\r\n            particle.position.y += Math.cos(particle.position.y * Math.sin(particle.position.x));\r\n        }\r\n        const initialPosition = particle.initialPosition;\r\n        const initialDistance = Utils_1.getDistance(initialPosition, particle.position);\r\n        if (particle.maxDistance) {\r\n            if (initialDistance >= particle.maxDistance && !particle.misplaced) {\r\n                particle.misplaced = initialDistance > particle.maxDistance;\r\n                particle.velocity.x = particle.velocity.y / 2 - particle.velocity.x;\r\n                particle.velocity.y = particle.velocity.x / 2 - particle.velocity.y;\r\n            }\r\n            else if (initialDistance < particle.maxDistance && particle.misplaced) {\r\n                particle.misplaced = false;\r\n            }\r\n            else if (particle.misplaced) {\r\n                if ((particle.position.x < initialPosition.x && particle.velocity.x < 0) ||\r\n                    (particle.position.x > initialPosition.x && particle.velocity.x > 0)) {\r\n                    particle.velocity.x *= -Math.random();\r\n                }\r\n                if ((particle.position.y < initialPosition.y && particle.velocity.y < 0) ||\r\n                    (particle.position.y > initialPosition.y && particle.velocity.y > 0)) {\r\n                    particle.velocity.y *= -Math.random();\r\n                }\r\n            }\r\n        }\r\n        applyDistance(particle);\r\n    }\r\n    applyPath(particle, delta) {\r\n        const particlesOptions = particle.options;\r\n        const pathOptions = particlesOptions.move.path;\r\n        const pathEnabled = pathOptions.enable;\r\n        if (!pathEnabled) {\r\n            return;\r\n        }\r\n        const container = this.container;\r\n        if (particle.lastPathTime <= particle.pathDelay) {\r\n            particle.lastPathTime += delta.value;\r\n            return;\r\n        }\r\n        let generator = container.pathGenerator;\r\n        if (pathOptions.generator) {\r\n            const customGenerator = Utils_1.Plugins.getPathGenerator(pathOptions.generator);\r\n            if (customGenerator) {\r\n                generator = customGenerator;\r\n            }\r\n        }\r\n        const path = generator.generate(particle);\r\n        particle.velocity.addTo(path);\r\n        if (pathOptions.clamp) {\r\n            particle.velocity.x = Utils_1.clamp(particle.velocity.x, -1, 1);\r\n            particle.velocity.y = Utils_1.clamp(particle.velocity.y, -1, 1);\r\n        }\r\n        particle.lastPathTime -= particle.pathDelay;\r\n    }\r\n    moveParallax(particle) {\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        if (Utils_1.isSsr() || !options.interactivity.events.onHover.parallax.enable) {\r\n            return;\r\n        }\r\n        const parallaxForce = options.interactivity.events.onHover.parallax.force;\r\n        const mousePos = container.interactivity.mouse.position;\r\n        if (!mousePos) {\r\n            return;\r\n        }\r\n        const canvasCenter = {\r\n            x: container.canvas.size.width / 2,\r\n            y: container.canvas.size.height / 2,\r\n        };\r\n        const parallaxSmooth = options.interactivity.events.onHover.parallax.smooth;\r\n        const factor = particle.getRadius() / parallaxForce;\r\n        const tmp = {\r\n            x: (mousePos.x - canvasCenter.x) * factor,\r\n            y: (mousePos.y - canvasCenter.y) * factor,\r\n        };\r\n        particle.offset.x += (tmp.x - particle.offset.x) / parallaxSmooth;\r\n        particle.offset.y += (tmp.y - particle.offset.y) / parallaxSmooth;\r\n    }\r\n    getProximitySpeedFactor(particle) {\r\n        const container = this.container;\r\n        const options = container.actualOptions;\r\n        const active = Utils_1.isInArray(Enums_1.HoverMode.slow, options.interactivity.events.onHover.mode);\r\n        if (!active) {\r\n            return 1;\r\n        }\r\n        const mousePos = this.container.interactivity.mouse.position;\r\n        if (!mousePos) {\r\n            return 1;\r\n        }\r\n        const particlePos = particle.getPosition();\r\n        const dist = Utils_1.getDistance(mousePos, particlePos);\r\n        const radius = container.retina.slowModeRadius;\r\n        if (dist > radius) {\r\n            return 1;\r\n        }\r\n        const proximityFactor = dist / radius || 0;\r\n        const slowFactor = options.interactivity.modes.slow.factor;\r\n        return proximityFactor / slowFactor;\r\n    }\r\n}\r\nexports.Mover = Mover;\r\n"]},"metadata":{},"sourceType":"script"}